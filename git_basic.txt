1. How to explain?

- git 개발자의 가장 기본적인 협업 도구 중 하나. 


* 특징
	- 어렵다. 기능이 많다. 왜 써야하는지 어렵다. 
	

- 기본적인 흐름을 알면, 개발자 언어를 알면 개발이 쉽다. 

2. Why git?

- 버전 관리. 
	- 예를 들면 SavePoitn
- 협업도구
	- 함께 일하고, 나눠서 일하고.

3. Basic command?

- CLI(command line interface)
	- 직접 명령어 입력
- GUI
	
(Fork를 누르면, 나의 계정이 보이면서 상대방 저장소를 저장할수 있다. )

- 기본 명령어.
	- commit : 저장
	- push : 반영
	- pull : 불러오기.
	
4. Branch and Merge?

5. Branch strategy?

깃 브랜치 전략
- 메인, 개발, 배포, 

- 메인(Main) 브랜치
	- 우리가 접하는 버전.
		- 안정적 커밋이 일어나지 않음 >> 최종 수정본.
- 개발(Develop) 브랜치
	- 우리가 개발을 위해 pull 받아야하는 버전.
		- 개발을 진행하기 위해 여러 버그가 존재. 
		- 피쳐 브랜치를 따야하는 곳.
- 배포(Release) 브랜치
	- 버그 수정만 하는 브랜치.
		- 개발을 하면 안되는 곳.
		- 꼭 데브와 메인에 머지해줘야한다.
- 피쳐(Feature) 브랜치
	- 개발을 하는데 사용하는 실험실.
		- 개발하다가 문제가 발생해도 버려도 되는 곳. 
		- 브랜치 하나당 기능 하나. 
		- 데브에서 모두 같이 개발하면 꼬일수 있어 혼자 사용하는 독립적인 공간.
- 핫픽스(HotFix) 브랜치
	- 급하게 수정되어야 하는 이슈
		- 버그/기능을 수정해야 하는곳.(우선순위가 높은 곳)
		- 배포(Release)와 맞찬가지로 데브와 메인에 머지 되어야 함.


6. Put into stash!

업무는 한번에 하나의 일만 하지는 못한다.
ex) 지난번에 개발했던 피처의 버그, 급하게 들어온 핫픽스, 미리 진행하고 싶은 기능의 구현

??? 이때 개발하다가 커밋하고 브랜치 바꾸고 하다가 커밋을 하나???

>>> 이때 해결 방법.

- 커밋은 반쪽짜리 커밋이 되면 안된다.

임시저장. 
- 커밋하지 않고 저장하는 방법은 없을까??
- 임시저장과 같은 기능
- 의미 없는 커밋 메시지는 만들지 말아야한다.
- 여러가지 작업을 임시저장할수 있다.
- 변경사항들은 사라진다.

기본 명령어는 >>> stash


7. Cherry pick

- 하다가 망했을때.. 되돌리기에는 너무 멀리 왔지만, 
- 필요한 것만 골라서 다시 사용하고 싶을때

8. why not? merge!

머지란??
>>> 브랜치를 합치는 것.
- 여러명의 코드가 한곳에 합쳐지는 것. 

이때 컨플릭트라는 문제가 생긴다. 


2-way-merge.

원래 브랜치 - 내가 작업한 브랜치 - 동료가 작업한 브랜치 - 머지 예상 결과

A - A - A - A
B2 - B2 - B - Conflict
C - C - C2 - Conflict
D2 - D2 - D3 - Conflict


이것을 개선한 것이 
3-way-merge.

원래 브랜치 - 내가 작업한 브랜치 - 동료가 작업한 브랜치 - 머지 예상 결과
A - A - A - A
B - B2 - B - B2
C - C - C2 - C2
D - D2 - D3 - Conflict


9. Why rebase??

Re-base >> 코드를 합치는 것.
merge와 기능상 동일.

그런데 왜 rebase가 필요한가??

rebase와 merge의 커밋 히스토리가 다르다. 


10. Upstream!
번역하면 상류.

소스는 위에서 아래로 흐른다.

Upstream 을 fork뜨면 downstream이 된다. 지금은 origin이라고 부른다.

로컬에 Clone을 하거나 pull을 받아서 사용한다.
로컬에서 작업하고 push.

그다음 내것에서 pull Request하면 된다.